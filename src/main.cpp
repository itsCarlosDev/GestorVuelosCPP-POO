
#include "CVuelo.h"
#include "CGestorVuelos.h"
#include <iostream>
#include <thread>   // std::this_thread::sleep_for
#include <chrono>   // std::chrono::seconds, std::chrono::milliseconds
#include <cstdlib>   // system

using namespace std;

// ============================
// TODO LIST - GESTOR DE VUELOS
// ============================

// üìä Ordenaci√≥n y b√∫squeda
// TODO: Implementar ordenaci√≥n de vuelos por precio (ordenarPorPrecio)
// TODO: Implementar ordenaci√≥n de vuelos por duraci√≥n (ordenarPorDuracion)
// TODO: Implementar b√∫squeda de vuelo por ID (buscarVueloPorID)

// üåç Rutas y conexiones
// TODO: Implementar b√∫squeda de ruta entre origen y destino (buscarRuta)
// TODO: Implementar visualizaci√≥n de todas las rutas (mostrarRutas)
// TODO: Implementar algoritmo DFS para recorridos de rutas (DFS)

// üë®‚Äç‚úàÔ∏è Gesti√≥n de pilotos
// TODO: Implementar visualizaci√≥n de experiencia del piloto (getExperiencia)
// TODO: Implementar visualizaci√≥n de cantidad de vuelos del piloto (getVuelos)
// TODO: Implementar asignaci√≥n de piloto a avi√≥n

// üßç Gesti√≥n de pasajeros y acompa√±antes
// TODO: Implementar inserci√≥n de pasajero (CPasajero)
// TODO: Implementar gesti√≥n de clase del pasajero (Business/Normal)
// TODO: Implementar asignaci√≥n de acompa√±antes al pasajero (m_Acompanantes)

// üßæ Gesti√≥n de personas
// TODO: Implementar obtenci√≥n de nombre de persona (getNombre)
// TODO: Implementar obtenci√≥n de tel√©fono de persona (getTelefono)
// TODO: Implementar obtenci√≥n de DNI de persona (getDNI)

// üõ´ Gesti√≥n de aviones
// TODO: Implementar visualizaci√≥n de datos de avi√≥n (capacidad, velocidad, ID)
// TODO: Implementar asignaci√≥n de avi√≥n a piloto

// üîß Utilidades generales
// TODO: Implementar estructura de men√∫ en consola (main menu + submen√∫s)
// TODO: Validar entradas de usuario (fechas, ID, clase, etc.)
// TODO: Integrar estructura de lista gen√©rica (CLista<T>)
// TODO: Implementar sistema de mensajes de error y validaci√≥n

// Created by AI (ChatGPT)
void esperar(int segundos) {
    std::this_thread::sleep_for(std::chrono::seconds(segundos));
}

void mostrarMenu() {
    cout << "\n=== GESTOR DE VUELOS ===\n";
    cout << "\n1. A√±adir vuelo\n";
    cout << "2. Eliminar vuelo\n";
    cout << "3. Modificar vuelo por ID\n";
    cout << "4. Mostrar vuelos actuales\n";
    cout << "5. Ordenar por precio\n";
    cout << "6. Ordenar por duraci√≥n\n";
    cout << "7. Buscar ruta entre ciudades\n";
    cout << "0. Salir\n";
    cout << "\nSelecciona una opci√≥n: ";
}

int main(int argc, char const *argv[])
{
    int opcion; // Menu selection 
    CGestorVuelos gestor;

    do {
        mostrarMenu();
        cin >> opcion;

        // The keys {} are to close each case for the variation independence.
        switch (opcion) {
            case 1: {
                cout << "\n-> Has seleccionado A√±adir vuelo\n";
                int id, dur, prec;
                cout << "\nIntroduce el ID del vuelo: ";
                cin >> id;
                cout << "Introduce la duraci√≥n (minutos): ";
                cin >> dur;
                cout << "Introduce el precio: ";
                cin >> prec;

                CVuelo vuelo(id, dur, prec);
                if(gestor.crearVuelo(vuelo)){ cout << "Creado correctamente.\n"; esperar(2); } else{ cout << "Se ha alcanzado el maximo de vuelos posible.\n"; esperar(2);};
                
                break;
            }
            case 2: {
                int id;

                if(gestor.getnumVuelos() != 0){
                    cout << "\n-> Has seleccionado Eliminar vuelo\n";
                    cout << "Introduce el ID del vuelo a eliminar: ";
                    cin >> id;

                    if(gestor.eliminarVuelo(id)){ cout << "Eliminado correctamente.\n"; esperar(2); } else{ cout << "No hay vuelos a eliminar. \n"; esperar(2);};
                } else {
                    cout << "No hay vuelos a eliminar. ";
                }
                break;
            }
            case 3: {
                int id, dur, prec;

                cout << "\n-> Has seleccionado modificar vuelo\n";

                if(gestor.getnumVuelos() != 0){
                    cout << "Introduce el ID del vuelo a modificar: ";
                    cin >> id;

                    cout << "Introduce la duraci√≥n (minutos): ";
                    cin >> dur;
                    cout << "Introduce el precio: ";
                    cin >> prec;

                    CVuelo vuelo(id, dur, prec);

                    if(gestor.modificarVuelos(id, vuelo)){ cout << "Vuelo modificado.\n"; esperar(2); } else{ cout << "No hay vuelos a modificar. \n"; esperar(2);};
                } else {
                    cout << "No hay vuelos a modificar. ";
                }    
                break;
            }
            case 4: {
                cout << "\n-> Has seleccionado Mostrar vuelos\n";
                gestor.mostrarVuelos();
                esperar(3);
                break;
            }
            case 5: {
                cout << "[Ordenar por precio]\n";
                // TODO: Ordenar por precio
                break;
            }
            case 6: {
                cout << "[Ordenar por duraci√≥n]\n";
                // TODO: Ordenar por duraci√≥n
                break;
            }
            case 7: {
                cout << "[Buscar ruta entre ciudades]\n";
                // TODO: Buscar ruta
                break;
            }
            case 0: {
                cout << "Saliendo del programa...\n";
                break;
            }
            default: {
                cout << "Opci√≥n inv√°lida. Int√©ntalo de nuevo.\n";
            }
        }

    } while (opcion != 0);

    return 0;
}
